# If you're reading this i'm not rich yet. My friends and I (along with the rest of the world) noticed that whenever Elon Musk 
# tweets about a company the company's stock price will jump up by about 20% briefly before spiking back down. However, I'm not
# a twitter user and the ticker has completed its spike before I'm able to see the tweet, log into my brokerage, and make a trade.
# Automation is required to take advantage of this borderline market manipulation. The purpose of this script is to monitor Elon's
# incoming tweets, analyze them to find a company name and ticker, then send a text to myself with the ticker and tweet. This script
# could be improved to incorporate TD Ameritrade's API to automatically invest my money after each Elon tweet, and will possibly be
# updated with this functionality in the future.

import tweepy
import time
import requests
import csv
import smtplib

# Function to send text to myself. Passing in the ticker as a string & tweet. Could be expanded to text multiple people by making to_number a dictionary of phone numbers & carriers
def SendText(ticker,OGTweet):
    if ticker is None:
        return
    carriers = {'att': '@txt.att.net', 'tmobile': ' @tmomail.net', 'verizon': '@vtext.com',
                'sprint': '@page.nextel.com'}
    message = "Elon tweeted about "+ticker
    to_number = '***INSERT PHONE***{}'.format(carriers['att'])
    auth = ('***INSERT GMAIL***', '***INSERT PW***')
    server = smtplib.SMTP("smtp.gmail.com", 587)
    server.starttls()
    server.login(auth[0], auth[1])
    server.sendmail(auth[0], to_number, str(message))

# Function to remove unnecessary words from tweet. Looks for matches in a downloaded CSV of 500 common words and removes them
def RemoveWords(TweetList):
    x = []
    results = []
    with open('/Users/clintmay/Downloads/WordCSV.csv', newline='') as inputfile:
        for row in csv.reader(inputfile):
            results.append(row[0])
    x = [x for x in TweetList if x not in results]
    return(x)

# Function to get ticker from search term. Serches each word on Yahoo Finance, returns the first result. If the first result has a match to the search term, considers it as a match
def GetTicker(searchterm):
    ticker = "empty"
    url = "http://d.yimg.com/autoc.finance.yahoo.com/autoc?query={}&region=1&lang=en".format(searchterm)
    result = requests.get(url).json()
    for x in result['ResultSet']['Result']:
        ticker = x
        break
    if(ticker != "empty"):
        if searchterm in ticker["name"].lower():
            return ticker["symbol"]
    else:
        return "No"

# Main function to drive all other funtions. Monitors incoming tweets, runs all above functions to analyze tweet & send text.
def Main(OGTweet):
    Newtweet = api.user_timeline(screen_name = 'elonmusk', count = 100,include_rts = False,exclude_replies = True)[0]
    while(OGTweet == Newtweet):
        time.sleep(5)
        return OGTweet
    OGTweet = Newtweet
    MostRecent = Newtweet.text
    MostRecent = str(Newtweet.text).lower().replace(".","").replace("'s","").replace("!","").replace("#","").replace("@","").replace(",","")
    MostRecentList = MostRecent.split()
    EditedList = RemoveWords(MostRecentList)
    for x in EditedList:
        ticker1 = GetTicker(x)
        if ticker1 != "No":
            SendText(ticker1,OGTweet)
    return OGTweet

# Initializing script. Use twitter API to initialize Tweepy, get first tweet, start comparing to new tweets
ckey = '***INSERT CKEY***'
csecret = '***INSERT CSECRET***'
atoken = '***INSERT ATOKEN***'
asecret = '***INSERT ASECRET***'
auth = tweepy.OAuthHandler(ckey, csecret)
auth.set_access_token(atoken, asecret)
api = tweepy.API(auth)
tweets = api.home_timeline()
OGTweet = api.user_timeline(screen_name = 'elonmusk', count = 100,include_rts = False,exclude_replies = True)[0]
x = 1
while(x == 1):
    OGTweet = Main(OGTweet)
