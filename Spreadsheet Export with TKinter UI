import tkinter as tk
from tkinter import ttk
import csv
import pandas as pd
import arcpy
from datetime import date
import os
import time
import sys

# Pull in data from CSVs to Pandas Dataframe. Make lists from first column of each dataframe to be used in UI dropdown
ProjectNameDF = pd.read_csv(***Insert path to CSV of project names & associated filepaths***)
ProjectList = ProjectNameDF[***Insert header title for project name column***].tolist()
ExportTypeDF = pd.read_csv(***Insert path to CSV containing selection names & expressions***)
ExportList = ExportTypeDF[***Insert header title for selection name column***].tolist()
today = date.today()

def submit():
    MuniStr = MuniCombo.get()
    ExportStr = ExportCombo.get()
    MuniPathObj = ProjectNameDF[ProjectNameDF[***Project Name***].str.contains(MuniStr)][***Project Path***]
    MuniPath = str(MuniPathObj.tolist()).replace("]","").replace("[","").replace("'","")
    MPTemp = MuniPath[:MuniPath.rfind(r"\\")]
    GDBPath = MuniPath[:MPTemp.rfind(r"\\")]
    ExpressionObj = ExportTypeDF[ExportTypeDF[***Selection Type***].str.contains(ExportStr)][***Selection Expression***]
    Expression = str(ExpressionObj.tolist()).replace("]","").replace("[","").replace("\"","")
    if(Expression.find("NULL") != -1):
        Expression = Expression.replace("'","")
    print(Expression)
    IntOutObj = ProjectNameDF[ProjectNameDF[***Project Name***].str.contains(MuniStr)][***Output Folder***]
    IntOutLoc = str(IntOutObj.tolist()).replace("]","").replace("[","").replace("'","").replace(r"\\","\\")
    ExpTypeObj = ExportTypeDF[ExportTypeDF[***Selection Type***].str.contains(ExportStr)][***Selection Type***]
    ExportType = str(ExpTypeObj.tolist()).replace(" ","_")
    MuniNameObj = ProjectNameDF[ProjectNameDF[***Project Name***].str.contains(MuniStr)][***Project Name***]
    MuniName = str(MuniNameObj.tolist()).replace(" ","_")
    OutputPath = (str(MuniName)+"_"+str(ExportType) + "_" + today.strftime("%m%d%Y")+".xlsx").replace("]","").replace("[","").replace("'","").replace(r"\\","\\")
    num = 1
    while os.path.exists(IntOutLoc + "\\"+ OutputPath) == True:
        if(os.path.exists(IntOutLoc + "\\"+ OutputPath+"_"+str(num)) == False and OutputPath[-7] != "_"):
            OutputPath = OutputPath.partition(".xlsx")[0]+"_"+str(num)+".xlsx"
        elif(os.path.exists(IntOutLoc + "\\"+ OutputPath[:-7]+"_"+str(num)+".xlsx") == False):
            OutputPath = str(OutputPath.partition(".xlsx")[0])[:-2]+"_"+str(num)+".xlsx"
        else:
            num += 1


    for fname in os.listdir(GDBPath):
        if fname.endswith('.lock'):
            text_box.delete(1.0, "end-1c")  # Clears the text box of data
            text_box.insert("end-1c","GDB In Use, contact Clint")
            text_box.update()
            time.sleep(3)
            for x in range(3, 0, -1):
                text_box.delete(1.0, "end-1c")  # Clears the text box of data
                text_box.insert("end-1c", "Closing in " + str(x) + " sec")  # adds text to text box
                text_box.update()
                time.sleep(1)
            sys.exit()
    else:
        # do stuff if a file .true doesn't exist.
        text_box.delete(1.0, "end-1c") # Clears the text box of data
        text_box.insert("end-1c", "Setting Workspace") # adds text to text box
        text_box.update()
        arcpy.env.workspace = GDBPath
        text_box.delete(1.0, "end-1c") # Clears the text box of data
        text_box.insert("end-1c", "Creating Feature Layer") # adds text to text box
        text_box.update()
        arcpy.MakeFeatureLayer_management(MuniPath,"Audit_lyr")
        text_box.delete(1.0, "end-1c") # Clears the text box of data
        text_box.insert("end-1c", "Selecting Fixtures") # adds text to text box
        text_box.update()
        arcpy.SelectLayerByAttribute_management("Audit_Lyr", "NEW_SELECTION", Expression)
        text_box.delete(1.0, "end-1c") # Clears the text box of data
        text_box.insert("end-1c", "Setting Export Workspace") # adds text to text box
        text_box.update()
        arcpy.env.workspace = IntOutLoc
        text_box.delete(1.0, "end-1c") # Clears the text box of data
        text_box.insert("end-1c", "Exporting to Excel") # adds text to text box
        text_box.update()
        arcpy.conversion.TableToExcel("Audit_Lyr",OutputPath,"ALIAS", "CODE")
        text_box.delete(1.0, "end-1c") # Clears the text box of data
        text_box.insert("end-1c", "Export Complete") # adds text to text box
        text_box.update()
        time.sleep(3)
        df = pd.DataFrame([IntOutLoc + "\\"+ OutputPath])
        df.to_clipboard(index=False, header=False)
        text_box.delete(1.0, "end-1c") # Clears the text box of data
        text_box.insert("end-1c", "Export Path Copied to Clipboard") # adds text to text box
        text_box.update()
        time.sleep(2)
        for x in range(3,0,-1):
            text_box.delete(1.0, "end-1c") # Clears the text box of data
            text_box.insert("end-1c", "Closing in "+str(x)+" sec") # adds text to text box
            text_box.update()
            time.sleep(1)
        sys.exit()


app = tk.Tk()
app.geometry('350x200')
MuniLabel = tk.Label(app,text='Select Project')
MuniLabel.place(x=200,anchor="center")
MuniLabel.grid(column=0, row=0)
MuniCombo = ttk.Combobox(app, values=ProjectList)
MuniCombo.grid(column=0, row=1)
MuniCombo.current(0)
ExportLabel = tk.Label(app,text='Select Export Type')
ExportLabel.grid(column=0, row=3)
ExportCombo = ttk.Combobox(app, values=ExportList)
ExportCombo.grid(column=0, row=4)
ExportCombo.current(0)
SubmitButton = ttk.Button(app, text="Export", width=10, command=submit)
SubmitButton.grid(column=0, row=5)
text_box = tk.Text(app,width = 25,height = 3)
text_box.grid(column=0,row=6)
app.columnconfigure(0, weight=1)
text_box.delete(1.0, "end-1c")  # Clears the text box of data
text_box.insert("end-1c", "Select project & export type to begin")  # adds text to text box




app.mainloop()
